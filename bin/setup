#!/bin/bash

set -e
set -u

source "$OPENSHIFT_CARTRIDGE_SDK_BASH"

# TODO: use version argument or manifest file
version=3.2.4

erlang_tgz="otp_src_R16B03-1.tar.gz"
erlang_dir="otp_src_R16B03-1"
erlang_url="https://packages.erlang-solutions.com/erlang/esl-erlang-src/$erlang_tgz"
erlang_md5="e5ece977375197338c1b93b3d88514f8"

rabbitmq_tgz="rabbitmq-server-generic-unix-3.2.4.tar.gz"
rabbitmq_dir="rabbitmq_server-3.2.4"
rabbitmq_url="https://www.rabbitmq.com/releases/rabbitmq-server/v3.2.4/$rabbitmq_tgz"
rabbitmq_md5="2c3788f9900b94a083bbbc705c87e2ca"

envdir="$OPENSHIFT_RABBITMQ_DIR/env"

destdir="$OPENSHIFT_RABBITMQ_DIR/versions/$version"
readyfile="$destdir/.rabbitmq-ready"

builddir="$destdir/build"


mkdir -p $OPENSHIFT_RABBITMQ_DIR/{log,pid,data}


if [ -f "$readyfile" ]
then
    client_result "RabbitMQ cartridge $version already setup in $destdir"
    exit 0
fi


rm -rf "$destdir"
mkdir -p "$destdir"

# Get sources into /tmp and save them there - this avoids downloading
# them again and again during cartridge development.

function get_source() {
    tgz="$1"
    url="$2"
    md5="$3"

    (
        cd "$OPENSHIFT_TMP_DIR"
        if [ -f "$tgz" ]
        then
            if echo "$md5 $tgz" | md5sum -c --quiet
            then
                client_result "Using previously downloaded $tgz"
                return
            else
                client_result "Incorrect checksum on $tgz, refetching it"
                rm "$tgz"
            fi
        fi

        tmpfile=`mktemp --tmpdir="$OPENSHIFT_TMP_DIR"`
        curl "$url" > "$tmpfile"
        mv "$tmpfile" "$tgz"

        if echo "$md5 $tgz" | md5sum -c --quiet
        then
            client_result "Fetched $tgz"
            return
        else
            client_error "Incorrect checksum on fetched $tgz"
            exit 1
        fi
    )
}

get_source "$erlang_tgz" "$erlang_url" "$erlang_md5"
get_source "$rabbitmq_tgz" "$rabbitmq_url" "$rabbitmq_md5"

# Build as small an Erlang engine as we dare
(
    rm -rf "$builddir"
    mkdir -p "$builddir"
    cd "$builddir"
    tar xzf "$OPENSHIFT_TMP_DIR/$erlang_tgz"
    cd "$erlang_dir"
    
    ./configure --prefix="$destdir/erlang" \
        --without-asn1 --without-common_test --without-cosEvent \
        --without-cosEventDomain --without-cosFileTransfer \
        --without-cosNotification --without-cosProperty --without-cosTime \
        --without-cosTransactions --without-debugger --without-dialyzer \
        --without-diameter --without-edoc --without-eldap --without-erl_docgen \
        --without-et --without-eunit --without-gs --without-hipe --without-ic \
        --without-inets --without-megaco --without-observer --without-odbc \
        --without-orber --without-os_mon --without-otp_mibs --without-percept \
        --without-pman --without-reltool --without-sasl --without-snmp \
        --without-ssh --without-syntax_tools --without-test_server \
        --without-toolbar --without-tools --without-tv --without-webtool \
        --without-wx

    make
    make install
) >"$OPENSHIFT_TMP_DIR/erlang-build.log" 2>&1

# Save space, we don't need this any longer
rm -rf "$builddir"

# RabbitMQ can simply be unpacked, nothing to build
(
    cd "$destdir"
    tar xzf "$OPENSHIFT_TMP_DIR/$rabbitmq_tgz"
    mv "$rabbitmq_dir" rabbitmq
)

# Enable the management plugin
"$destdir/rabbitmq/sbin/rabbitmq-plugins" enable rabbitmq_management

# Set up environment that depends on the version
set_env_var OPENSHIFT_RABBITMQ_PATH_ELEMENT "$destdir/rabbitmq/sbin" "$envdir"
set_env_var ERL_DIR "$destdir/erlang/bin" "$envdir"
